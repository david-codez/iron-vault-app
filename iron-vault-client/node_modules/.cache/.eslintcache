[{"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/index.tsx":"1","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/reportWebVitals.ts":"2","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/App.tsx":"3","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/app/store.ts":"4","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/Nav.tsx":"5","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/features/auth/authService.ts":"6","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/lib/User.ts":"7","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/Dashboard.tsx":"8","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/login.jsx":"9","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/features/auth/authSlice.ts":"10","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/signup.tsx":"11","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/app/hooks.ts":"12","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/pages/Auth.tsx":"13","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/pages/Messages.tsx":"14","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/messages/Sidebar.tsx":"15"},{"size":900,"mtime":1660018507068,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1660010454604,"results":"18","hashOfConfig":"17"},{"size":1955,"mtime":1660504465062,"results":"19","hashOfConfig":"17"},{"size":432,"mtime":1660011955922,"results":"20","hashOfConfig":"17"},{"size":1530,"mtime":1660371575937,"results":"21","hashOfConfig":"17"},{"size":1384,"mtime":1660172377113,"results":"22","hashOfConfig":"17"},{"size":763,"mtime":1659676870271,"results":"23","hashOfConfig":"17"},{"size":372,"mtime":1660172489423,"results":"24","hashOfConfig":"17"},{"size":2529,"mtime":1660173191901,"results":"25","hashOfConfig":"17"},{"size":3603,"mtime":1660171641091,"results":"26","hashOfConfig":"17"},{"size":5510,"mtime":1660370806200,"results":"27","hashOfConfig":"17"},{"size":1000,"mtime":1660503673136,"results":"28","hashOfConfig":"17"},{"size":853,"mtime":1660370463164,"results":"29","hashOfConfig":"17"},{"size":210,"mtime":1660504421069,"results":"30","hashOfConfig":"17"},{"size":2176,"mtime":1660509898045,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"1ot5o6h",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"36"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/index.tsx",["86","87"],[],"import React, { useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css'\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst container = document.getElementById('root')!;\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/reportWebVitals.ts",[],[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/App.tsx",["88","89","90","91","92"],[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/app/store.ts",[],[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/Nav.tsx",["93","94","95"],[],"import React, { useState } from 'react';\nimport { useNavigate, NavLink } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n} from 'reactstrap';\n\nexport default function  NavBar (props: any) {\n  \n  const navigate = useNavigate()\n\n  // console.log(props)\n  const [isOpen, setIsOpen] = useState(false);\n  // const user = useSelector((state: any) => state.auth.user)\n  // console.log(user)\n  const toggle = () => setIsOpen(!isOpen);\n\n\n\n  return (\n    <div className='navbar-div'>\n      <Navbar dark color='dark' expand='md' container='fluid' fixed='top' id=\"navbar\">\n        <NavbarBrand>Iron Vault</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"me-auto\" navbar>\n            <NavItem>\n              <NavLink className='nav-link' to=\"/\">Home</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/profile\" className='nav-link'>Profile</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/messages\" className='nav-link'>Messages</NavLink>\n            </NavItem>\n          </Nav>\n          <div className='login-logout-link'>\n            { props.isLoggedIn ? <button onClick={props.handleLogout}>Logout</button> : <button onClick={() => navigate('/auth/login')}>Login</button>}\n          </div>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/features/auth/authService.ts",[],[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/lib/User.ts",[],[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/Dashboard.tsx",["96"],[],"import React from 'react'\nimport { useSelector } from 'react-redux'\n\n\nconst Dashboard = (props: any) => {\n  \n  const user = props.user\n  console.log(props)\n\n  console.log(props.user);\n  \n  return (\n    <>\n            <div className='welcome-message'>\n              { user ? <h1>Hello, {user.name}!</h1> : <></> }\n            </div>\n    </>\n\n  )\n}\n\nexport default Dashboard","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/login.jsx",["97","98","99"],[],"import React, { useState, useEffect } from  'react'\nimport { Container, Form, FormGroup, Label, Input, FormText, Button  } from 'reactstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login, reset } from '../features/auth/authSlice'\nimport { toast } from 'react-toastify'\nimport { useNavigate } from 'react-router-dom'\n\n\n\n\n\n\nexport default function Login() {\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    const { user, isLoading, isError, isSuccess, message } = useSelector((state) => state.auth)\n\n\n        \n    const [formValues, setFormValues] = useState({\n        email: '',\n        password: '',\n    })\n    const {email, password} = formValues\n\n\n    const onChange = (e) => {\n        setFormValues((prevState) => ({\n            ...prevState,\n            [e.target.name]: e.target.value\n        }))\n    }\n\n    useEffect(() => {\n        if(isError) {\n            toast.error(message)\n        }\n        if(isSuccess || user) {\n            navigate('/')\n        }\n\n        dispatch(reset())\n    \n    }, [user, isError, isSuccess, message, navigate])\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        const userData = {\n            email,\n            password\n        }\n\n        dispatch(login(userData))\n    }\n\n \n\n    return (\n        <>\n        <Container>\n            <h1 className='heading'>Log In</h1>\n        </Container>\n        <Container className='form-container'>\n            <Form onSubmit={onSubmit} className='login-form'>\n                <FormGroup>\n                    <Label for=\"email\">Email:</Label>\n                    <Input\n                        id='email'\n                        name='email'\n                        placeholder='Email'\n                        type='text'\n                        onChange={onChange}\n\n                    />\n                </FormGroup>                \n                <FormGroup>\n                    <Label for=\"password\">Password:</Label>\n                    <Input\n                        id='password'\n                        name='password'\n                        placeholder='Password'\n                        type='password'\n                        onChange={onChange}\n\n                    />\n                </FormGroup>\n                <FormGroup className='submit-button-div'>\n                    <Button className='submit-button'>\n                        Submit\n                    </Button>\n                </FormGroup>\n           \n            </Form>\n\n        </Container>\n        </>\n    )\n}",[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/features/auth/authSlice.ts",["100"],[],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport thunk from 'redux-thunk'\nimport { GymMember } from '../../lib/User'\nimport authService from './authService'\n\n// get user from local storage\n  \n// get user from local storage\n// let user = JSON.parse(localStorage.user)\n// console.log(localStorage.user)\n\n\n\n\n\n//declaring initial state\nconst initialState = {\n    user: null,\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: ''\n}\n\n// register the user\nexport const register = createAsyncThunk('auth/register', async (user: GymMember, thunkAPI) => {\n    try {\n        //makes call to authService register function which will handle http request\n        return await authService.register(user)\n    } catch (error: any) {\n        //if an error is returned, search in several places for the error message and return it\n        const message = (error.response && error.response.data && error.response.data.message) || \n            error.message || error.toString()\n        \n        // returns error message as payload\n        return thunkAPI.rejectWithValue(message)    \n    }\n})\n\n// login the user\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n    try {\n        //makes call to authService login function which will handle http request and return user info\n        return await authService.login(user)\n    } catch (error: any) {\n        //if an error is returned, search in several places for the error message and return it\n        const message = (error.response && error.response.data && error.response.data.message) || \n            error.message || error.toString()\n        \n        // returns error message as payload\n        return thunkAPI.rejectWithValue(message)    \n    }\n})\n\n//logout user and destroy token in local storage\nexport const logout = createAsyncThunk('auth/logout', async () => {\n    await authService.logout()\n})\n\n//creates authslice\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        reset: (state) => {\n            state.isLoading = false\n            state.isSuccess = false\n            state.isError = false\n            state.message = ''\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            // register \n            .addCase(register.pending, (state) => { \n                state.isLoading = true\n            })\n            .addCase(register.fulfilled, (state, action: any) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(register.rejected, (state,action: any) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n                state.user = null\n            }) \n            // login \n            .addCase(login.pending, (state) => { \n                state.isLoading = true\n            })\n            .addCase(login.fulfilled, (state, action: any) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(login.rejected, (state,action: any) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n                state.user = null\n            })\n            // logout\n            .addCase(logout.fulfilled, (state) =>{\n                state.user = null\n            })\n    },\n\n})\n\nexport const {reset} = authSlice.actions\nexport default authSlice.reducer","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/signup.tsx",["101","102","103","104","105","106","107"],[],"import React, { useState, useEffect } from  'react'\nimport {  useSelector } from 'react-redux'\nimport NavBar from './Nav'\nimport { Container, Form, FormGroup, Label, Input, FormText, Button  } from 'reactstrap'\nimport { toast } from 'react-toastify'\nimport { register, reset } from '../features/auth/authSlice'\nimport type { GymMember } from '../lib/User'\nimport { useNavigate } from 'react-router-dom'\nimport { useAppDispatch } from '../app/hooks'\n\nexport default function SignUp() {\n    // const router = useRouter()\n    const dispatch = useAppDispatch()\n    const navigate = useNavigate()\n    const { user, isLoading, isError, isSuccess, message } = useSelector((state: any) => state.auth)\n\n    \n    const initialUser = {\n        username: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        password2: '',\n        admin: false,\n    }\n\n\n    const [formValues, setFormValues] = useState(initialUser)\n\n    const { username, firstName, lastName, email, password, password2, admin } = formValues\n\n\n\n    //handling registration form submit\n    const onSubmit = (e: any) => {\n        // console.log(password, password2)\n        //stops page reload\n        e.preventDefault()\n        //check if passwords match\n        if(password !== password2) {\n            toast.error('Passwords do not match')\n        } else {\n            //creating user data object for registration\n            const userData: GymMember = {\n                username: formValues.username,\n                firstName: formValues.firstName,\n                lastName: formValues.lastName, \n                email: formValues.email, \n                password: formValues.password,\n                admin: formValues.admin,\n            }\n            console.log(userData)\n            //calling register function from authSlice and passing in user \n            dispatch(register(userData))\n        } \n    }\n\n\n\n\n    const handleInputChange = (e: any) => {\n        const {name, value} = e.target;\n        setFormValues({\n            ...formValues,\n            [name]: value,\n        });\n    };\n\n\n\n\n    useEffect(() => {\n        if(isError) {\n            toast.error(message)\n        }\n        if(isSuccess || user) {\n            toast.success(\"User Created Successfully\")\n            navigate('/')\n        }\n\n        dispatch(reset())\n    \n    }, [user, isError, isSuccess, message, dispatch, navigate])\n\n\n    return (\n        <>\n        <NavBar />\n        <Container className='form-container'>\n            <h1 className='heading'>Sign Up Form</h1>\n            <Form onSubmit={onSubmit} className='signup-form'>\n            <FormGroup>\n                    <Label for='username'>\n                        Username:\n                    </Label>\n                    <Input\n                        id='username'\n                        name='username'\n                        placeholder='Username'\n                        type='text'\n                        onChange={handleInputChange}\n                    />\n                </FormGroup> \n                <FormGroup>\n                    <Label for='firstName'>\n                        First Name:\n                    </Label>\n                    <Input\n                        id='firstName'\n                        name='firstName'\n                        placeholder='First Name'\n                        type='text'\n                        onChange={handleInputChange}\n                    />\n                </FormGroup>                \n                <FormGroup>\n                    <Label for='lastName'>\n                        Last Name:\n                    </Label>\n                    <Input\n                        id='lastName'\n                        name='lastName'\n                        placeholder='Last Name'\n                        type='text'\n                        onChange={handleInputChange}\n\n                    />     \n                </FormGroup>           \n                <FormGroup>\n                    <Label for='email'>\n                        Email:\n                    </Label>\n                    <Input\n                        id='email'\n                        name='email'\n                        placeholder='Email'\n                        type='text'\n                        onChange={handleInputChange}\n\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label for='password1'>\n                        Password:\n                    </Label>\n                    <Input\n                        id='password'\n                        name='password'\n                        placeholder='Password'\n                        type='password'\n                        onChange={handleInputChange}\n\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label for='password2'>\n                        Re-enter Password:\n                    </Label>\n                    <Input\n                        id='password2'\n                        name='password2'\n                        placeholder='Re-enter Password'\n                        type='password'\n                        onChange={handleInputChange}\n                    />\n                </FormGroup>\n                <FormGroup className='submit-button-div'>\n                    <Button className='submit-button'>\n                        Submit\n                    </Button>\n                </FormGroup>\n            \n            </Form>\n        </Container>\n        </>\n    )\n}","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/app/hooks.ts",[],[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/pages/Auth.tsx",["108","109","110","111","112"],[],"import React, { useState } from 'react'\nimport { Route, Routes } from 'react-router-dom'\nimport Login from '../components/login'\nimport SignUp from '../components/signup'\nimport {  useRoutes, Link, useParams } from \"react-router-dom\"\nimport { ButtonGroup, Button } from 'reactstrap'\n\n\nconst Auth = (props: any) => {\n    const [toggleLogin, setToggleLogin] = useState(true)\n \n\n    return (\n        <div className='auth-form'>\n            <ButtonGroup className='auth-button-group'>\n                <Button className='auth-button' active={toggleLogin} onClick={() => setToggleLogin(true)}>Login</Button>\n                <Button className='auth-button' active={!toggleLogin} onClick={() => setToggleLogin(false)}>Sign Up</Button>\n            </ButtonGroup>\n            { toggleLogin ? <Login /> : <SignUp /> }\n        </div>\n\n    )\n\n}\n\n\nexport default Auth","/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/pages/Messages.tsx",["113"],[],"/Users/homebase/Documents/David Codez Repo/MERN-iron-vault/iron-vault-client/src/components/messages/Sidebar.tsx",["114","115","116"],[],{"ruleId":"117","severity":1,"message":"118","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":25},{"ruleId":"117","severity":1,"message":"121","line":1,"column":27,"nodeType":"119","messageId":"120","endLine":1,"endColumn":36},{"ruleId":"117","severity":1,"message":"122","line":2,"column":8,"nodeType":"119","messageId":"120","endLine":2,"endColumn":13},{"ruleId":"117","severity":1,"message":"123","line":4,"column":10,"nodeType":"119","messageId":"120","endLine":4,"endColumn":19},{"ruleId":"117","severity":1,"message":"124","line":5,"column":26,"nodeType":"119","messageId":"120","endLine":5,"endColumn":32},{"ruleId":"117","severity":1,"message":"125","line":6,"column":10,"nodeType":"119","messageId":"120","endLine":6,"endColumn":21},{"ruleId":"117","severity":1,"message":"126","line":12,"column":8,"nodeType":"119","messageId":"120","endLine":12,"endColumn":14},{"ruleId":"117","severity":1,"message":"125","line":3,"column":10,"nodeType":"119","messageId":"120","endLine":3,"endColumn":21},{"ruleId":"117","severity":1,"message":"127","line":3,"column":23,"nodeType":"119","messageId":"120","endLine":3,"endColumn":34},{"ruleId":"117","severity":1,"message":"128","line":4,"column":10,"nodeType":"119","messageId":"120","endLine":4,"endColumn":14},{"ruleId":"117","severity":1,"message":"125","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":2,"column":52,"nodeType":"119","messageId":"120","endLine":2,"endColumn":60},{"ruleId":"129","severity":1,"message":"131","line":16,"column":19,"nodeType":"119","messageId":"120","endLine":16,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":44,"column":8,"nodeType":"134","endLine":44,"endColumn":53,"suggestions":"135"},{"ruleId":"117","severity":1,"message":"136","line":2,"column":8,"nodeType":"119","messageId":"120","endLine":2,"endColumn":13},{"ruleId":"117","severity":1,"message":"130","line":4,"column":52,"nodeType":"119","messageId":"120","endLine":4,"endColumn":60},{"ruleId":"117","severity":1,"message":"131","line":15,"column":19,"nodeType":"119","messageId":"120","endLine":15,"endColumn":28},{"ruleId":"117","severity":1,"message":"137","line":31,"column":13,"nodeType":"119","messageId":"120","endLine":31,"endColumn":21},{"ruleId":"117","severity":1,"message":"138","line":31,"column":23,"nodeType":"119","messageId":"120","endLine":31,"endColumn":32},{"ruleId":"117","severity":1,"message":"139","line":31,"column":34,"nodeType":"119","messageId":"120","endLine":31,"endColumn":42},{"ruleId":"117","severity":1,"message":"140","line":31,"column":44,"nodeType":"119","messageId":"120","endLine":31,"endColumn":49},{"ruleId":"117","severity":1,"message":"141","line":31,"column":72,"nodeType":"119","messageId":"120","endLine":31,"endColumn":77},{"ruleId":"117","severity":1,"message":"142","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":15},{"ruleId":"117","severity":1,"message":"143","line":2,"column":17,"nodeType":"119","messageId":"120","endLine":2,"endColumn":23},{"ruleId":"117","severity":1,"message":"144","line":5,"column":11,"nodeType":"119","messageId":"120","endLine":5,"endColumn":20},{"ruleId":"117","severity":1,"message":"128","line":5,"column":22,"nodeType":"119","messageId":"120","endLine":5,"endColumn":26},{"ruleId":"117","severity":1,"message":"145","line":5,"column":28,"nodeType":"119","messageId":"120","endLine":5,"endColumn":37},{"ruleId":"117","severity":1,"message":"118","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":25},{"ruleId":"117","severity":1,"message":"121","line":1,"column":27,"nodeType":"119","messageId":"120","endLine":1,"endColumn":36},{"ruleId":"117","severity":1,"message":"146","line":10,"column":12,"nodeType":"119","messageId":"120","endLine":10,"endColumn":21},{"ruleId":"117","severity":1,"message":"147","line":10,"column":23,"nodeType":"119","messageId":"120","endLine":10,"endColumn":35},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Login' is defined but never used.","'GymMember' is defined but never used.","'Router' is defined but never used.","'useSelector' is defined but never used.","'SignUp' is defined but never used.","'useDispatch' is defined but never used.","'Link' is defined but never used.","no-unused-vars","'FormText' is defined but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["148"],"'thunk' is defined but never used.","'username' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'email' is assigned a value but never used.","'admin' is assigned a value but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'useRoutes' is defined but never used.","'useParams' is defined but never used.","'activeKey' is assigned a value but never used.","'setActiveKey' is assigned a value but never used.",{"desc":"149","fix":"150"},"Update the dependencies array to be: [user, isError, isSuccess, message, navigate, dispatch]",{"range":"151","text":"152"},[1052,1097],"[user, isError, isSuccess, message, navigate, dispatch]"]